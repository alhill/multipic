{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","working","Loader","H1","h1","H3","h3","CopyrightWrapper","ImageGrid","Image","img","Block","InputGroup","TheButton","CustomFile","label","Modal","ButtonWrapper","Info","App","inputPics","useRef","useState","refPic","setRefPic","inputPicsState","setInputPicsState","reductionRatio","setReductionRatio","inputSize","setInputSize","setWorking","visible","modal","setModal","loadFiles","files","type","filesReady","forEach","f","i","arr","reader","FileReader","readAsDataURL","onloadend","push","original","result","length","current","getAvgColor","pic","h","bitmap","height","w","width","t","avgColorPre","Array","fill","map","e","x","y","Math","trunc","Jimp","intToRGBA","getPixelColor","reduce","acc","it","r","g","b","round","getClosestPic","pixel","len","ip","diff","getColorDifference","avgColor","color","sort","a","resized","color1","color2","deltaR","abs","deltaG","deltaB","cropImgToSquare","crop","getResizedPic","resize","parseInt","moveYourMoneyMaker","isArray","text","read","err","console","log","fn","iHaveNoFear","croppedImage","j","resizedPic","pixelColorArr","fullArray","px","composePic","stitchItAll","composite","upAndOut","quality","getBase64Async","MIME_JPEG","b64img","triggerBase64Download","Date","getTime","style","marginTop","htmlFor","id","multiple","onChange","target","key","src","onClick","filteredArray","filter","cancelText","okText","xmlns","viewBox","version","d","transform","value","marginRight","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d635c0da.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react'\r\nimport { triggerBase64Download } from 'react-base64-downloader';\r\nimport styled from 'styled-components'\r\nimport Jimp from 'jimp'\r\n\r\nfunction App() {\r\n    const inputPics = useRef()\r\n    const [refPic, setRefPic] = useState()\r\n    const [inputPicsState, setInputPicsState] = useState([])\r\n    const [reductionRatio, setReductionRatio] = useState(10)\r\n    const [inputSize, setInputSize] = useState(35)\r\n    const [working, setWorking] = useState()\r\n    const [modal, setModal] = useState({\r\n        visible: false\r\n    })\r\n\r\n    const loadFiles = (files, type) => {\r\n        let filesReady = [];\r\n        [...files].forEach((f, i, arr) => {\r\n            const reader = new FileReader()\r\n            reader.readAsDataURL(f);\r\n            reader.onloadend = () => {\r\n                if(type === \"input\"){\r\n                    filesReady.push({\r\n                        original: reader.result\r\n                    })\r\n                    if(arr.length === i + 1){\r\n                        setInputPicsState([...(inputPics.current ?? []), ...filesReady])\r\n                        inputPics.current = [...(inputPics.current ?? []), ...filesReady]\r\n                    }\r\n                }\r\n                else{ \r\n                    setRefPic(reader.result) \r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    const processRefImage = () => {\r\n        setWorking(\"Reading reference image\")\r\n        Jimp.read(refPic, (err, pic) => {\r\n            const h = Math.trunc(pic.bitmap.height / reductionRatio)\r\n            const w = Math.trunc(pic.bitmap.width / reductionRatio)\r\n            const t = h * w\r\n            const resizedPic = getResizedPic(pic, w, h)\r\n            const pixelColorArr = Array(t).fill(null).map((e, i) => {\r\n                const x = i % w\r\n                const y = Math.trunc(i / w)\r\n                return {\r\n                    x,\r\n                    y,\r\n                    color: Jimp.intToRGBA(resizedPic.getPixelColor(x, y))\r\n                }\r\n            })\r\n\r\n            setWorking(`Comparing each pixel of the reference image with the input files`) \r\n            const fullArray = pixelColorArr.map((px, i, arr) => {\r\n                return ({\r\n                    ...px,\r\n                    composePic: getClosestPic(px, inputPics.current, i+1, arr.length)\r\n                })\r\n            })\r\n            \r\n            setWorking(`Composing the whole image`)\r\n            stitchItAll(fullArray, w, h)\r\n        })\r\n    }\r\n\r\n    const getAvgColor = pic => {\r\n        const h = pic.bitmap.height\r\n        const w = pic.bitmap.width\r\n        const t = h * w\r\n        const pixelColorArr = Array(t).fill(null).map((e, i) => {\r\n            const x = i % w\r\n            const y = Math.trunc(i / w)\r\n            return Jimp.intToRGBA(pic.getPixelColor(x, y))\r\n        })\r\n        const avgColorPre = pixelColorArr.reduce((acc, it) => {\r\n            return {\r\n                r: it.r + acc.r,\r\n                g: it.g + acc.g,\r\n                b: it.b + acc.b\r\n            }\r\n        }, {r: 0, g: 0, b: 0})\r\n        return {\r\n            r: Math.round(avgColorPre.r / t),\r\n            g: Math.round(avgColorPre.g / t),\r\n            b: Math.round(avgColorPre.b / t)\r\n        }\r\n    }\r\n\r\n    const getClosestPic = (pixel, inputPics, i, len) => {\r\n        const closest = inputPics.map(ip => ({\r\n            ...ip,\r\n            diff: getColorDifference(ip.avgColor, pixel.color)\r\n        })).sort((a, b) => {\r\n            if(a.diff > b.diff){ return 1 }\r\n            else{ return -1 }\r\n        })[0]\r\n        return closest.resized\r\n    }\r\n\r\n    const getColorDifference = (color1 = {}, color2 = {}) => {\r\n        const deltaR = Math.abs(color1.r - color2.r)\r\n        const deltaG = Math.abs(color1.g - color2.g)\r\n        const deltaB = Math.abs(color1.b - color2.b)\r\n        return deltaR + deltaG + deltaB\r\n    }\r\n\r\n    const cropImgToSquare = pic => {\r\n        const h = pic.bitmap.height\r\n        const w = pic.bitmap.width\r\n        return pic.crop(\r\n            w > h ? (w-h)/2 : 0, \r\n            w > h ? 0 : (h-w)/2,\r\n            w > h ? h : w, \r\n            w > h ? h : w\r\n        )\r\n    }\r\n\r\n    const getResizedPic = (pic, w, h = w) => {\r\n        return pic.resize(parseInt(w), parseInt(h))\r\n    }\r\n\r\n    const moveYourMoneyMaker = async () => {\r\n        if(!Array.isArray(inputPics.current) || inputPics.current?.length === 0){\r\n            setModal({\r\n                visible: true,\r\n                text: \"Select input files\"\r\n            })\r\n            return\r\n        }\r\n        if(!refPic){\r\n            setModal({\r\n                visible: true,\r\n                text: \"Select reference image\"\r\n            })\r\n            return\r\n        }\r\n\r\n        Jimp.read(refPic, (err, pic) => {\r\n            const h = Math.trunc(pic.bitmap.height / reductionRatio) * inputSize\r\n            const w = Math.trunc(pic.bitmap.width / reductionRatio) * inputSize\r\n            console.log({h, w})\r\n            if(h > 5000 || w > 5000){\r\n                setWorking(\" \")\r\n                setModal({\r\n                    visible: true,\r\n                    text: `The dimensions of the output image with the selected reduction ratio and square size will be ${w}*${h}. \r\nGenerating images so big can slow down your browser and even crash it.\r\nDo you want to continue?`,\r\n                    fn: () => {\r\n                        setModal({ visible: false })\r\n                        iHaveNoFear()\r\n                    }\r\n                })\r\n            }\r\n            else{\r\n                iHaveNoFear()\r\n            }\r\n        })\r\n\r\n        const iHaveNoFear = async () => {\r\n            inputPics.current.forEach((ip, i, arr) => {\r\n                setWorking(\"Reading input pics\")\r\n                Jimp.read(ip.original, (err, pic) => {\r\n                    setWorking(`Processing input pics`)\r\n                    const avgColor = getAvgColor(pic)\r\n                    const croppedImage = cropImgToSquare(pic)\r\n                    const resized = getResizedPic(croppedImage, inputSize)\r\n\r\n                    inputPics.current.forEach((ip, j, arr) => {\r\n                        if(i === j){\r\n                            inputPics.current[i] = {\r\n                                ...inputPics.current[i],\r\n                                avgColor,\r\n                                resized\r\n                            }\r\n                        }\r\n                        if(arr.length === i + 1 && arr.length === j + 1){\r\n                            processRefImage()\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    const stitchItAll = (arr, w, h) => {\r\n        new Jimp(w * inputSize, h * inputSize, 0xffffff, (err, img) => {\r\n            arr.forEach((px, i, arr) => {\r\n                img.composite(\r\n                    px.composePic,\r\n                    px.x * inputSize, \r\n                    px.y * inputSize\r\n                );  \r\n                if(arr.length === i + 1){\r\n                    upAndOut(img)\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    const upAndOut = async img => {\r\n        setWorking(`Converting to base 64...`)\r\n        img.quality(60)\r\n        const b64img = await img.getBase64Async(Jimp.MIME_JPEG)\r\n        setWorking(`Downloading...`)\r\n        triggerBase64Download(b64img, `Multipic-${new Date().getTime()}`)\r\n        setWorking(false)\r\n    }\r\n    \r\n    return (\r\n        <Container working={working}>\r\n            { working && <Loader><span>{ working }</span></Loader> }\r\n\r\n            <H1 style={{ marginTop: 0 }}>Multipic</H1>\r\n            \r\n            <Block>\r\n                <H3>Input images</H3>\r\n                <CustomFile htmlFor=\"file-upload-input\">\r\n                    Select images\r\n                </CustomFile>\r\n                <input id=\"file-upload-input\" type=\"file\" multiple onChange={e => loadFiles(e.target.files, \"input\")} />\r\n                { inputPicsState?.length > 0 && (\r\n                    <ImageGrid>\r\n                        { inputPicsState?.map((pic, i) => <Image key={`ip-${i}`} src={pic.original} onClick={() => {\r\n                            const filteredArray = inputPicsState.filter((ip, j) => i !== j)\r\n                            setInputPicsState(filteredArray)\r\n                            inputPics.current = filteredArray\r\n                        }} /> ) }\r\n                    </ImageGrid>\r\n                )}\r\n            </Block>\r\n            \r\n            <Block>\r\n                <H3>Reference image</H3>\r\n                <CustomFile htmlFor=\"file-upload-ref\">\r\n                    Select image\r\n                </CustomFile>\r\n                <input id=\"file-upload-ref\" type=\"file\" onChange={e => loadFiles(e.target.files, \"ref\")} />\r\n                { refPic && (\r\n                    <div>\r\n                        <br />\r\n                        <Image src={refPic} style={{ width: 200, height: 200 }} onClick={() => setRefPic()} />\r\n                    </div>\r\n                )}\r\n            </Block>\r\n\r\n            <Block>\r\n                <H3>Parameters</H3>\r\n                <InputGroup>\r\n                    <label>Reduction ratio</label>\r\n                    <Info onClick={() => {\r\n                        setWorking(\" \")\r\n                        setModal({\r\n                            visible: true,\r\n                            text: \"This ratio will divide the size of the reference size. Per example, a 1000*800 image with a reduction ratio of 10 will have 100*80 pixels substituted with your input images\",\r\n                            cancelText: \"Umh, if you say so\",\r\n                            okText: \"OK!\",\r\n                            fn: () => {\r\n                                setModal({ visible: false })\r\n                                setWorking(false)\r\n                            }\r\n                        })\r\n                    }}>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"10 10 150 150\" height=\"25\" width=\"25\" version=\"1.0\">\r\n                            <g fill=\"#4b4b4b\">\r\n                                <path d=\"m80 15c-35.88 0-65 29.12-65 65s29.12 65 65 65 65-29.12 65-65-29.12-65-65-65zm0 10c30.36 0 55 24.64 55 55s-24.64 55-55 55-55-24.64-55-55 24.64-55 55-55z\"/>\r\n                                <path d=\"m57.373 18.231a9.3834 9.1153 0 1 1 -18.767 0 9.3834 9.1153 0 1 1 18.767 0z\" transform=\"matrix(1.1989 0 0 1.2342 21.214 28.75)\"/>\r\n                                <path d=\"m90.665 110.96c-0.069 2.73 1.211 3.5 4.327 3.82l5.008 0.1v5.12h-39.073v-5.12l5.503-0.1c3.291-0.1 4.082-1.38 4.327-3.82v-30.813c0.035-4.879-6.296-4.113-10.757-3.968v-5.074l30.665-1.105\"/>\r\n                            </g>\r\n                        </svg>\r\n                    </Info>\r\n                    <input value={reductionRatio} onChange={e => setReductionRatio(e.target.value)} type=\"number\" />\r\n                </InputGroup>\r\n                <InputGroup>\r\n                    <label>Square size</label>\r\n                    <Info onClick={() => {\r\n                        setWorking(\" \")\r\n                        setModal({\r\n                            visible: true,\r\n                            text: \"This is the size your input images will have in the output image. Per example, with a square size of 35, each one of the pixels of the reduced reference image will be substituted with an input image with a size of 35*35px\",\r\n                            cancelText: \"I dunno...\",\r\n                            okText: \"Gotcha!\",\r\n                            fn: () => {\r\n                                setModal({ visible: false })\r\n                                setWorking(false)\r\n                            }\r\n                        })\r\n                    }}>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"10 10 150 150\" height=\"25\" width=\"25\" version=\"1.0\">\r\n                            <g fill=\"#4b4b4b\">\r\n                                <path d=\"m80 15c-35.88 0-65 29.12-65 65s29.12 65 65 65 65-29.12 65-65-29.12-65-65-65zm0 10c30.36 0 55 24.64 55 55s-24.64 55-55 55-55-24.64-55-55 24.64-55 55-55z\"/>\r\n                                <path d=\"m57.373 18.231a9.3834 9.1153 0 1 1 -18.767 0 9.3834 9.1153 0 1 1 18.767 0z\" transform=\"matrix(1.1989 0 0 1.2342 21.214 28.75)\"/>\r\n                                <path d=\"m90.665 110.96c-0.069 2.73 1.211 3.5 4.327 3.82l5.008 0.1v5.12h-39.073v-5.12l5.503-0.1c3.291-0.1 4.082-1.38 4.327-3.82v-30.813c0.035-4.879-6.296-4.113-10.757-3.968v-5.074l30.665-1.105\"/>\r\n                            </g>\r\n                        </svg>\r\n                    </Info>\r\n                    <input value={inputSize} onChange={e => setInputSize(e.target.value)} type=\"number\" />\r\n                </InputGroup>\r\n            </Block>\r\n\r\n            <br />\r\n            <TheButton style={{ marginTop: \"1em\" }} onClick={() => moveYourMoneyMaker()}>Let's go!</TheButton>\r\n\r\n            { modal.visible && (\r\n                <Modal>\r\n                    <H3>{modal.text}</H3>\r\n                    <ButtonWrapper>\r\n                        {modal.fn && <TheButton style={{ marginRight: 10 }} onClick={() => modal.fn()}>{ modal.okText || \"Continue\" }</TheButton>}\r\n                        <TheButton onClick={() => {\r\n                            setModal({ visible: false })\r\n                            setWorking(false)\r\n                        }}>{ modal.cancelText || \"Cancel\" }</TheButton>\r\n                    </ButtonWrapper>\r\n                </Modal>\r\n            )}\r\n            <CopyrightWrapper>\r\n                <p>2020 -&nbsp;<a href=\"https://alhill.dev\">Al Hill</a></p>\r\n                <p>The source code of this application can be downloaded&nbsp;<a href=\"https://github.com/alhill/multipic\">here</a>. Use it wisely.</p>\r\n            </CopyrightWrapper>\r\n        </Container>\r\n\r\n    );\r\n}\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    position: relative;\r\n    padding-bottom: 1em;\r\n    height: ${({ working }) => working ? \"100vh\" : \"auto\"};\r\n    overflow: hidden;\r\n    min-height: 100vh;\r\n`\r\n\r\nconst Loader = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    min-height: 100vh;\r\n    z-index: 100;\r\n    background-color: rgba(240, 240, 240, 0.9);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    text-align: center;\r\n    span {\r\n        font-size: 1.8em;\r\n    }\r\n`\r\n\r\nconst H1 = styled.h1`\r\n    margin: 1em 0;\r\n    padding: 1em 0 0 0;\r\n    color: #666;\r\n    font-size: 3em;\r\n    font-family: Lexend Tera;\r\n`\r\n    \r\nconst H3 = styled.h3`\r\n    font-family: Lexend Tera;\r\n    margin-top: 0;\r\n    color: #555;\r\n`\r\n\r\nconst CopyrightWrapper = styled.div`\r\n    font-family: Lexend Tera;\r\n    color: #999;\r\n    font-size: 1em;\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    text-align: center;\r\n    justify-content: flex-end;\r\n    align-content: flex-end;\r\n    a{\r\n        text-decoration: none;\r\n        color: #666;\r\n        transition: all 300ms;\r\n        &:hover{\r\n            color: black;\r\n        }\r\n    }\r\n    p{\r\n        margin: 0.5em 0;\r\n    }\r\n`\r\n\r\nconst ImageGrid = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    margin-top: 2em;\r\n`\r\nconst Image = styled.img`\r\n    border-radius: 4px;\r\n    width: 100px;\r\n    height: 100px;\r\n    object-fit: cover;\r\n    object-position: center center;\r\n    margin: 0 1em 1em 0;\r\n    transition: all 300ms;\r\n    box-shadow: 1px 1px 3px 1px rgba(0, 0, 0, 0.1);    \r\n    &:hover{\r\n        filter: saturate(0.5) brightness(0.5);\r\n        transform: scale(1.1);\r\n    }\r\n`\r\nconst Block = styled.div`\r\n    padding: 1em;\r\n    margin-top: 1em;\r\n    border-radius: 2px;\r\n    background: linear-gradient(45deg, rgba(56,239,125, 0.2), rgba(17,153,142, 0.2));\r\n    width: calc(100% - 4em);\r\n`\r\n\r\nconst InputGroup = styled.div`\r\n    display: flex;\r\n    margin-bottom: 1em;\r\n    align-items: center;\r\n    label{\r\n        color: #555;\r\n        width: 200px;\r\n    }\r\n    input {\r\n        height: 24px;\r\n        padding: 6px;\r\n        font-family: Lexend Tera;\r\n        color: #555;\r\n        background-color: rgba(255, 255, 255, 0.7);\r\n        border-radius: 2px;\r\n        font-size: 1.3em;\r\n        border: none;\r\n        width: 100px;\r\n    }\r\n` \r\n\r\nconst TheButton = styled.div`\r\n    width: 240px;\r\n    height: 40px;\r\n    background-color: #555;\r\n    color: #fcfcfc;\r\n    border-radius: 2px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-weight: bold;\r\n    transition: all 100ms;\r\n    box-shadow: 1px 1px 0 #bbb;\r\n    cursor: pointer;\r\n    &:hover{\r\n        filter: brightness(0.95);\r\n        box-shadow: 5px 5px 0 #ccc;    \r\n    }\r\n`\r\n\r\nconst CustomFile = styled.label`\r\n    width: 240px;\r\n    height: 40px;\r\n    background-color: #555;\r\n    color: #fcfcfc;\r\n    border-radius: 2px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-weight: bold;\r\n    transition: all 100ms;\r\n    box-shadow: 1px 1px 0 #ccc;\r\n    cursor: pointer;\r\n    &:hover{\r\n        filter: brightness(0.95);\r\n        box-shadow: 5px 5px 0 #ccc;    \r\n    }\r\n` \r\n\r\nconst Modal = styled.div`\r\n    position: absolute;\r\n    top: 100px;\r\n    min-width: 300px;\r\n    width: 60vw;\r\n    min-height: 240px;\r\n    border: 3px solid pink;\r\n    border-radius: 4px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    background-color: rgba(255, 255, 255, 0.95);\r\n    padding: 1em 2em;\r\n    z-index: 200;\r\n`\r\nconst ButtonWrapper = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: space-evenly;\r\n`\r\n\r\nconst Info = styled.div`\r\n    width: 25px;\r\n    height: 25px;\r\n    opacity: 0.4;\r\n    transition: all 300ms;\r\n    padding-right: 2em;\r\n    &:hover{\r\n        opacity: 0.7;\r\n    }\r\n`\r\n    \r\nexport default App;\r\n    ","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}